Timer unit: 1e-06 s

Total time: 0.991582 s
File: post-sim-recycling.py
Function: main at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                           @profile
    13                                           def main():
    14         1        492.0    492.0      0.0      with h5py.File(h5file, "r+") as f:
    15        21        607.0     28.9      0.1          for i in range(150,170):
    16        20        449.0     22.4      0.0              print("iteration", i)
    17        20         38.0      1.9      0.0              time1 = time.time()
    18        20         37.0      1.9      0.0              if transactions:
    19                                                           #arr_t = numpy.array((transactions), dtype=int)
    20                                                           #arr_i = numpy.array((transactions), dtype=int)[:,0]
    21        19       2448.0    128.8      0.2                  arr_t = numpy.array(transactions)
    22        19         49.0      2.6      0.0                  arr_i = arr_t[:,0]
    23        19         23.0      1.2      0.0                  to_delete = i-2
    24        19        317.0     16.7      0.0                  if to_delete in arr_i:
    25        17         64.0      3.8      0.0                      to_delete_index = arr_i == to_delete
    26        17        189.0     11.1      0.0                      limit = numpy.where(to_delete_index == True)[0][-1]
    27        17        172.0     10.1      0.0                      del transactions[0:limit+1]
    28                                               
    29        20         84.0      4.2      0.0              path = "iterations/iter_" + str(i).zfill(8)
    30        20         29.0      1.4      0.0              nextpath = "iterations/iter_" + str(i+1).zfill(8)
    31        20      10667.0    533.4      1.1              pcoords = f[path]['pcoord'][:,-1] 
    32        20      10425.0    521.2      1.1              parents = f[path]['seg_index']['parent_id']
    33        20      10911.0    545.5      1.1              nextparents = f[nextpath]['seg_index']['parent_id']
    34        20       2582.0    129.1      0.3              wtgraph = f[path]['wtgraph']
    35        20       2590.0    129.5      0.3              nextwtgraph = f[nextpath]['wtgraph']
    36        20      10065.0    503.2      1.0              wtg_np = f[path]['seg_index']['wtg_n_parents']
    37        20      10682.0    534.1      1.1              wtg_off = f[path]['seg_index']['wtg_offset']
    38        20      10605.0    530.2      1.1              nextwtg_np = f[nextpath]['seg_index']['wtg_n_parents']
    39        20      10356.0    517.8      1.0              nextwtg_off = f[nextpath]['seg_index']['wtg_offset']
    40        20      10190.0    509.5      1.0              weights = f[path]['seg_index']['weight']
    41        20      10229.0    511.4      1.0              nextweights = f[nextpath]['seg_index']['weight']
    42        20       8723.0    436.1      0.9              auxcoords = f[path]['auxdata/c14n34'][:,-1]
    43        20        274.0     13.7      0.0              max_weight = weights.max()
    44        20        242.0     12.1      0.0              w = numpy.where(weights == max_weight)[0][0]
    45        20        132.0      6.6      0.0              next_parent_add = numpy.where(nextparents == w)[0][0]
    46                                                       
    47                                                       # Find the walkers that entered the alternate product state.        
    48        20        109.0      5.5      0.0              aux_mask = numpy.where(auxcoords < 1.7)
    49        20       6214.0    310.7      0.6              diff = numpy.setdiff1d(nextwtgraph, nextparents)
    50        20         72.0      3.6      0.0              merged = []
    51                                                       
    52      4245       6131.0      1.4      0.6              for k in numpy.arange(0,nextweights.shape[0]):
    53      4225       6292.0      1.5      0.6                  off = nextwtg_off[k]
    54      4225       5618.0      1.3      0.6                  np = off + nextwtg_np[k]
    55      4225     622056.0    147.2     62.7                  gotmerged = nextwtgraph[off:np]
    56      4225       7448.0      1.8      0.8                  if gotmerged.shape[0] > 1:
    57       665        847.0      1.3      0.1                      merged.append(gotmerged)
    58                                                       
    59                                           
    60        20        152.0      7.6      0.0              merge_ids = []
    61        20         26.0      1.3      0.0              transaction_weights = []
    62        20         19.0      0.9      0.0              diff_where = []
    63                                               
    64        25         46.0      1.8      0.0              for l in aux_mask[0]:
    65         5         31.0      6.2      0.0                  if l in nextparents:
    66                                                               next_seg = numpy.where(nextparents==l)[0]
    67                                                               merge_ids.append(next_seg)
    68                                                               transaction_weights.append(weights[l])
    69                                                           else:
    70       150        154.0      1.0      0.0                      for num, m in enumerate(merged):
    71       145        556.0      3.8      0.1                          if l in m:
    72         5        348.0     69.6      0.0                              ndiff = numpy.setdiff1d(m,diff)
    73         5          7.0      1.4      0.0                              if ndiff.shape[0] > 1: 
    74                                                                           if ndiff[0] in nextparents:
    75                                                                               ndiff = ndiff[0]
    76                                                                               continue
    77                                                                           else:
    78                                                                               ndiff = ndiff[1]
    79         5         34.0      6.8      0.0                              next_seg = numpy.where(nextparents==ndiff)[0]
    80         5          7.0      1.4      0.0                              merge_ids.append(next_seg)
    81         5          9.0      1.8      0.0                              transaction_weights.append(weights[l])
    82                                                                   else:
    83                                                                       continue
    84                                               
    85        20         19.0      0.9      0.0              iteration = i
    86        20         22.0      1.1      0.0              iteration_plus_one = i+1
    87        25         39.0      1.6      0.0              for num, p in enumerate(merge_ids):
    88         5          5.0      1.0      0.0                  next_parent_subtract = p
    89         5          5.0      1.0      0.0                  if len(next_parent_subtract) > 1:
    90                                                               num_split = len(next_parent_subtract)
    91                                                               split_weight = transaction_weights[num]/num_split
    92                                                               for q in next_parent_subtract:
    93                                                                   #print(iteration, p, "xxx", "[", q, "]")
    94                                                                   #print(split_weight)
    95                                                                   #transactions.append([iteration_plus_one, q, -1, split_weight])
    96                                                                   #transactions.append([iteration_plus_one, next_parent_add, 1, split_weight])
    97                                                                   transaction_array1 = numpy.array([iteration_plus_one, q, -1, split_weight])
    98                                                                   transaction_array2 = numpy.array([iteration_plus_one, next_parent_add, 1, split_weight])
    99                                                                   transactions.append(transaction_array1)
   100                                                                   transactions.append(transaction_array2)
   101                                           
   102                                                           else:
   103                                                               #print(iteration, p, "-->", "[", next_parent_subtract[0], "]")
   104                                                               #print(transaction_weights[num])
   105         5         14.0      2.8      0.0                      transaction_array1 = numpy.array([iteration_plus_one, next_parent_subtract[0], -1, transaction_weights[num]])
   106         5         10.0      2.0      0.0                      transaction_array2 = numpy.array([iteration_plus_one, next_parent_add, 1, transaction_weights[num]])
   107         5          5.0      1.0      0.0                      transactions.append(transaction_array1)
   108         5          5.0      1.0      0.0                      transactions.append(transaction_array2)
   109                                                               #transactions.append([iteration_plus_one, next_parent_subtract[0], -1, transaction_weights[num]])
   110                                                               #transactions.append([iteration_plus_one, next_parent_add, 1, transaction_weights[num]])
   111                                                             
   112                                                       # Now to reset and do forward propagation. This must be done on-the-fly.   
   113                                               
   114                                                       #print(transactions[0])
   115        20         21.0      1.1      0.0              merge_ids = []
   116        20         19.0      0.9      0.0              transaction_weights = []
   117        20        101.0      5.0      0.0              unique_transactions = []
   118                                           
   119        20         24.0      1.2      0.0              if not transactions:
   120                                                           continue
   121                                                       #arr_t = numpy.array((transactions), dtype=int)
   122                                                       #arr_i = numpy.array((transactions), dtype=int)[:,0]
   123                                                       #arr_s = numpy.array((transactions), dtype=int)[:,1] 
   124                                                       
   125        20       1767.0     88.3      0.2              arr_t = numpy.array(transactions)
   126        20         44.0      2.2      0.0              arr_i = arr_t[:,0]
   127        20        272.0     13.6      0.0              if i not in arr_i:
   128         1          1.0      1.0      0.0                  continue
   129                                           
   130        19        229.0     12.1      0.0              this_iter = arr_t[arr_i == i]
   131        19         35.0      1.8      0.0              arr_s = this_iter[:,1] 
   132                                                       #print(arr_s)
   133                                                       #print(numpy.unique(arr_s))    
   134      1306       2081.0      1.6      0.2              for u in numpy.unique(arr_s):
   135      1287       7232.0      5.6      0.7                  unique_positions = this_iter[arr_s == u]
   136      1287       7496.0      5.8      0.8                  total_weight = (unique_positions[:,2]*unique_positions[:,3]).sum()
   137                                                           #print(unique_positions[:,2])
   138                                                           #print(unique_positions[:,3])
   139      1287       3804.0      3.0      0.4                  unique_array = numpy.array([int(i), int(u), int(1), total_weight])
   140      1287       1552.0      1.2      0.2                  unique_transactions.append(unique_array)
   141                                                           #print(total_weight)
   142                                                           #print(unique_positions)
   143                                                       #print(numpy.array(unique_transactions))
   144                                           
   145                                                       #for j in arr_t[arr_i == i]:
   146      1306       1279.0      1.0      0.1              for j in unique_transactions:
   147                                                           #print(j[1])
   148                                               
   149      1287       7654.0      5.9      0.8                  if j[1] in nextparents:
   150       808       5027.0      6.2      0.5                      next_seg = numpy.where(nextparents==j[1])[0]
   151       808        942.0      1.2      0.1                      merge_ids.append(next_seg)
   152       808       1261.0      1.6      0.1                      transaction_weights.append(j[2]*j[3])
   153                                                           else:
   154     16641      18324.0      1.1      1.8                      for num, m in enumerate(merged):
   155     16162      75244.0      4.7      7.6                          if j[1] in m:
   156       479      29419.0     61.4      3.0                              ndiff = numpy.setdiff1d(m,diff)
   157       479        764.0      1.6      0.1                              if ndiff.shape[0] > 1: 
   158        17        126.0      7.4      0.0                                  if ndiff[0] in nextparents:
   159        17         21.0      1.2      0.0                                      ndiff = ndiff[0]
   160        17         16.0      0.9      0.0                                      continue
   161                                                                           else:
   162                                                                               ndiff = ndiff[1]
   163       462       2685.0      5.8      0.3                              next_seg = numpy.where(nextparents==ndiff)[0]
   164       462        586.0      1.3      0.1                              merge_ids.append(next_seg)
   165       462        841.0      1.8      0.1                              transaction_weights.append(j[2]*j[3])
   166                                                                   else:
   167                                                                       continue
   168                                                                           
   169        19         17.0      0.9      0.0              iteration = i
   170        19         21.0      1.1      0.0              iteration_plus_one = i+1
   171      1289       1305.0      1.0      0.1              for num, p in enumerate(merge_ids):
   172      1270       1214.0      1.0      0.1                  next_parent_subtract = p
   173      1270       1392.0      1.1      0.1                  if len(next_parent_subtract) > 1:
   174       239        242.0      1.0      0.0                      num_split = len(next_parent_subtract)
   175       239        328.0      1.4      0.0                      split_weight = transaction_weights[num]/num_split
   176      1093       1428.0      1.3      0.1                      for q in next_parent_subtract:
   177                                                                   #print(iteration, "FP", p, "xxx", "[", q, "]")
   178                                                                   #transactions.append([iteration_plus_one, q, -1, split_weight])
   179                                                                   #transactions.append([iteration_plus_one, next_parent_add, 1, split_weight])
   180       854       1769.0      2.1      0.2                          transaction_array1 = numpy.array([iteration_plus_one, q, -1, split_weight])
   181       854       1677.0      2.0      0.2                          transaction_array2 = numpy.array([iteration_plus_one, next_parent_add, 1, split_weight])
   182       854        948.0      1.1      0.1                          transactions.append(transaction_array1)
   183       854        889.0      1.0      0.1                          transactions.append(transaction_array2)
   184                                           
   185                                                           else:
   186                                                               #print(iteration, "FP", p, "-->", "[", next_parent_subtract[0], "]")
   187                                                               #transactions.append([iteration_plus_one, next_parent_subtract[0], -1, transaction_weights[num]])
   188                                                               #transactions.append([iteration_plus_one, next_parent_add, 1, transaction_weights[num]])   
   189      1031       2307.0      2.2      0.2                      transaction_array1 = numpy.array([iteration_plus_one, next_parent_subtract[0], -1, transaction_weights[num]])
   190      1031       2063.0      2.0      0.2                      transaction_array2 = numpy.array([iteration_plus_one, next_parent_add, 1, transaction_weights[num]])
   191      1031       1150.0      1.1      0.1                      transactions.append(transaction_array1)
   192      1031       1100.0      1.1      0.1                      transactions.append(transaction_array2)
   193                                            
   194        19         18.0      0.9      0.0              b = 0      
   195        19         22.0      1.2      0.0              if not transactions:
   196                                                           continue
   197                                                       #arr_t = numpy.array((transactions), dtype=int)
   198                                                       #arr_i = numpy.array((transactions), dtype=int)[:,0]
   199                                           
   200        19       2548.0    134.1      0.3              arr_t = numpy.array(transactions)
   201        19         40.0      2.1      0.0              arr_i = arr_t[:,0]
   202                                            
   203        19        212.0     11.2      0.0              if i not in arr_i:
   204                                                           continue
   205                                               ##############################           
   206      3443       3972.0      1.2      0.4              for r in arr_t[arr_i == i]:
   207      3424       4057.0      1.2      0.4                  segment = int(r[1])
   208                                                           #print(segment)
   209      3424       4669.0      1.4      0.5                  new_weight = weights[segment] + r[2]*r[3]
   210      3424       3555.0      1.0      0.4                  weights[segment] = new_weight
   211      3424       3365.0      1.0      0.3                  b = 1
   212                                               ##############################
   213        19         20.0      1.1      0.0              if b == 1:
   214        19        285.0     15.0      0.0                  weights /= (weights.sum())
   215        19      11756.0    618.7      1.2                  f[path]['seg_index']['weight',:] = weights
   216                                                       else:
   217                                                           continue
   218        19         54.0      2.8      0.0              time2 = time.time()
   219        19        321.0     16.9      0.0              print(time2-time1)

